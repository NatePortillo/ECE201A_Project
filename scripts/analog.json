{
    "classA": "# Class A Amplifier\nThe purpose of a Class A amplifier is to provide linear amplification of an input signal. This results in low distortion of the amplified signal. \nclass A amplifier can be created with two nmos transistors, called amp and load. The source of amp is connected to VSS and the drain of amp is connected the source of load. The drain of load is connected to VDD. The gate of amp is connected to the input signal and the gate of load is connected to a bias voltage. The output signal is taken from the drain of amp.\n\n## Routing\nRoute together the drain of amp and the source of load.",
    "CommonCentroid": "# Common Centroid Pair\nGlayout includes a common centroid matching component which is the \"common centroid pair\". This components has 3 parameters.\nFirst parameter is float type and called \"width\"\nSecond paramter is float type and called \"length\"\nLast parameter is int type and called \"fingers\"\n\nThe component includes 2 transistors which are called \"A\" and \"B\". \nThe ports for transistor A are under\n[component name]_A_\nThe ports for transistor B are under\n[component name]_B_\n",
    "CommonDrain": "# Common Drain Amplifier\nThe purpose of a common drain amplifier, aka a source follower, is to provide buffering. It has high input impedance, low output impedance, and a voltage gain close to unity.\nA typical source follower consists of two NMOS transistors called inp and degen. The degen transistor connected such that it acts as a resistor and its drain is shorted with the source of the inp transistor. The input is applied to the gate of inp and the output is taken from the source of inp. \n\n## Routing \nOnly route together these ports, nothing else\n1. Connect the source of inp to the drain of degen. \n2. Connect the drain of the degen to the gate of degen\n\n",
    "CommonSource": "# Common Source Amplifier\nTypically, this amplifier is used to provide voltage gain after preamplification. It has high input impedance and low output impedance. It consists of a pmos transistor called pullup and an nmos transistor called pulldown. This topology is called common source as the input and output terminals share the source as a common terminal. \n\n## Routing \ncommon source amplifier routing depends if it has a folded diode load. In the normal case, do the following:\n1. Connect the drain of pullup to the drain of pulldown \n2. Connect the source of pullup to the gate of pullup\n",
    "CurrentMirror": "# Current Mirror\nA current mirror is a circuit designed to copy a current. It uses either two pmos or two nmos transistors. Current is copied from a transistor called reference to the other transistor called mirror. The ratio of the current in the drain of the reference to the current in the drain of mirror is equal to the ratio the W/L of the mirror to the W/L of the reference. This is a very important circuit, often used as a current source in many analog circuits. \n\n## Routing \ncurrent mirror, route reference gate to mirror gate, reference drain to reference gate, and reference source to mirror source\n1. Connect the source of reference to the source of mirror. \n2. Connect the gate of reference to the gate of mirror. \n3. Connect the drain of reference to the gate of reference.",
    "DeltaSigmaModulator": "# Delta Sigma Modulator ADC\nA delta sigma modulator is a circuit consisting of several existing components including an opamp and a latched comparator. The latched compartor includes a d flip flop and a strong arm latch. All these components can be directly imported. The outputs of the opamp should be connected to the inputs of the latched comparator.\nDelta-sigma (\u00ce\u201d\u00ce\u00a3; or sigma-delta, \u00ce\u00a3\u00ce\u201d) modulation is an oversampling method for encoding signals into low bit depth digital signals at a very high sample-frequency as part of the process of delta-sigma analog-to-digital converters (ADCs) and digital-to-analog converters (DACs). Delta-sigma modulation achieves high quality by utilizing a negative feedback loop during quantization to the lower bit depth that continuously corrects quantization errors and moves quantization noise to higher frequencies well above the original signal's bandwidth. Subsequent low-pass filtering for demodulation easily removes this high frequency noise and time averages to achieve high accuracy in amplitude which can be ultimately encoded as pulse-code modulation (PCM).\n",
    "diffpair": "# Differential Pair or diffpair\nA differential pair is an amplifier used to amplify the difference between two voltage input signals. It uses two nmos or pmos transistors, with their sources shorted together. This kind of amplifier is able to achieve high gain and high input impedance. The single-ended output is taken from one end of the pair.\n## Place\na differential pair consists of two transistors, one for the positive side and one for the negative side\n## Routing\ndifferential pair only has one route which is source to source\n",
    "GeneralArray": "# x by y array of elements (e.g. fet, mimcap, or via)\ncreate a x by y array of elements is a common request. \nNOTE, An array is NOT itself a single component that can be placed. You MUST MANUALLY place each element in the array.\nTo fulfill this request, you must place the element (a component) several times into a matrix. Arrays require placing the same component many times into a matrix like structure. The single component which is placed many times (also called the array element) is typically included in the designers request. Arrays are typically described by their dimensions (rows by columns). The dimensions are NOT a parameter and are hard coded. Dimensions should NOT be confused with single element parameters (which should be same for all elements in the array).\n## place\nwhen placing elements of an array, always multiply rows by columns to get number of elements in the array. Name the placed components by their element index (start with element1, then element2, and so on).\n## move\nmove the other elements in the first row to the right of element1\nmove each element in the second row above the first row, and move the other elements in the second row to the right of the leftmost element in the second row\ncontinue this until all rows are moved into position.\n## Routing\nrouting depends on the component in the array, but route from the first element until the last element, routing each element to the elements which are nearest to it.",
    "inverter": "# inverter\nAn inverter is a two transistor circuit that is able to invert the input signal. In simpler terms, an input signal that is classified as input high, creates an output low signal and vice versa. It uses a PMOS, called pullup, and NMOS, called pulldown. \n## Routing \ninverter, route pmos source to nmos drain, and short the gates",
    "mimcap": "# MIMCAP or mim capacitor\nThe mimcap is a single capacitor element. \nIt is a standard glayout component called \"mimcap\". It has only one parameter which is the \"size\" and is tuple type. The size describes the width and height of the single mimcap element.\n\nvalid mimcap ports syntax structure:\nstart with the component reference name.\nthen specify top_met or bottom_met\nthen specify a direction from N, E, S, or W",
    "MimcapArray": "# x by y array of mimcaps\ncreate a x by y array of mimcaps is a common request. \nNOTE, An array is NOT itself a single component that can be placed. You MUST MANUALLY place each mimcap in the array.\nTo fulfill this request, you must place the mimcap (a component) several times into a matrix. Arrays require placing the same component many times into a matrix like structure. The single component which is placed many times (also called the array mimcap) is typically included in the designers request. Arrays are typically described by their dimensions (rows by columns). The dimensions are NOT a parameter and are hard coded. Dimensions should NOT be confused with single mimcap parameters (which should be same for all mimcaps in the array).\n## place\nwhen placing mimcaps of an array, always multiply rows by columns to get number of mimcaps in the array. Name the placed components by their mimcap index (start with mimcap1, then mimcap2, and so on).\n## move\nmove the mimcaps in the first row to the right of mimcap1\nmove each mimcap in the second row above the first row, and move the other mimcaps in the second row to the right of the leftmost mimcap in the second row\ncontinue this until all rows are moved into position.\n\nin other words\nstart by moving the first row into position\nthen move the second row above first row\nand arrange the second row from left to right\n\n## Routing\nOnly route each mimcap to the mimcaps which are nearest to it.",
    "mosfet": "# MOSFET transistor\nMOSFETs come in n-type (nmos or nfet) and p-type (pmos or pfet)\nA MOSFET is the basic transistor device used to build circuits. The two types of MOSFETs are the nmos or n-type or nfet and pmos or p-type or pfet. These include four terminals: Source (S), Gate (G), Drain (D), and Body (B). However, in almost all circuits, the body terminal is internally connected to the source, so the designer mainly uses source, gate, and drain.",
    "opamp": "# Opamp or Operational Amplifier\nAn operational amplifier or opamp is a voltage amplifying device. A 4 stage opamp consists of several integrator stages. A 2 stage opamp can be created using the following components:\n## First Stage\nPlace the following: \nTwo nfet differential pair transistors called diffpair_left and diffpair_right, two load current mirror pmos transistors called load_mirr and load_ref, two tail current mirror nmos transistors called tail_mirr and tail_ref. the tail_mirr transistor should be placed at the bottom. The diffpair_left transistor should be placed above the tail_mirr transistor and the diffpair_right transistor should be placed above the tail_ref transistor. The load_mirr transistor should be placed above the diffpair_left transistor and the load_ref transistor should be placed above the diffpair_right transistor.\n## Second stage\nPlace the following:\nA common source pmos transistor called pamp, two current mirror nmos transistors called pamp_mirr and pamp_ref. There is also a miller capacitance, which uses a mimcap array called miller_cap. \nThe pamp transistor should be placed above the pamp_mirr and pamp_ref transistor. pamp_ref should be to the right of pamp_mirr. The miller_cap should be placed above the pamp transistor.\n## Routing\nOnly route together these ports, nothing else\n1. Connect the source of diffpair_left to the source of diffpair_right.\n2. Connect the drain of diffpair_left to the drain of load_ref.\n3. Connect the drain of diffpair_right to the drain of load_mirr. \n4. Connect the gate of load_mirr to the gate of load_ref. \n5. Connetc the drain of load_ref to the gate of load_ref. \n6. Connect the source of diffpair_left to the drain of tail_mirr.\n7. Connect the gate of tail_mirr to the gate of tail_ref.\n8. Connect the source of tail_mirr to the source of tail_ref.\n9. Connect the source of load_ref to the source of load_mirr. \n10. Connect the drain of tail_ref to the gate of tail_ref. \n11. Connect the drain of diffpair_right to the gate of pamp. \n12. Connect the source of pamp to the drain of pamp_mirr.\n13. Connect the source of pamp_ref to the source of pamp_mirr. \n14. Connect the drain of pamp_ref to the gate of pamp_mirr. \n15. Connect the gate of pamp_ref to the gate of pamp_mirr.\n16. Connect the drain of diffpair_right to the top metal of first capacitor of miller_cap.\n17. Connect the drain of pamp to the top metal of the last capacitor in miller_cap.\n",
    "pushpullamp": "# Push Pull or Class B Amplifier\nA push-pull amplifier typically consists of two transistors, a nmos and pmos called sink and src respectively. This topology is useful as it unifies sourcing and sinking to achieve better power efficiency and cancellation of even harmonics in the spectral output. \n## Routing \nOnly route together these ports, nothing else\n1. Connect the gates of src and sink \n2. Connect the source of src to the source of sink",
    "StrongArmLatch": "# Strong Arm Latch\nA strong arm latch consists of an nmos differential pair called diffp, a cross coupled inverter component (CrossCoupledInverters), a bridge nfet called bridge, a clkgnd nfet, a tail nfet called tail, and two pfets clkpwrL1 and clkpwrL2 (west) and clkpwrR1 and clkpwrR2 (east). The tail nfet should be at the bottom. Diffp should be above tail and bridge should be above diffp. The cross couple inverters should be above bridge. The CrossCoupledInverters should be imported clkpwrL1 and clkpwrL2 should be to the left of the cross coupled inverter and clkpwrR1 and clkpwrR2 should be the right of the cross coupled inverters. \n## Routing \nOnly route together these ports, nothing else\n1. Connect the source of diffp to the drain of tail. \n2. Connect the drain of bridge to the drain of the one of the nmos of diffp. \n3. Connect the source of bridge to the drain of the other nmos of diffp.\n4. Connect the source of the left nmos of the cross coupled inverters to the drain of the left nmos. \n5. Connect the source of the right nmos of the cross coupled inverters to the drain of the right nmos. \n6. Connect the drain of clkpwrR2 (the rightmost pmos) to the drain of the right nmos of diffp\n7. Connect the drain of clkpwrR1 to the drain the right nmos of the cross coupled inverters.\n8. Connect the drain of clkpwrL2 (the leftmost pmos) to the drain of the left nmos of diffp\n9. Connect the drain of clkpwrL1 to the drain the left nmos of the cross coupled inverters.\n10. Connect the gates of clkpwrL1 and clkpwrL2 together.\n11. Connect the gates of clkpwrR1 and clkpwrR2 together.",
    "WilsonCurrentMirror": "# Wilson Current Mirror\nA wilson current mirror is a 4 transistor extension on the basic current mirror design. It adds 2 transistors in the exact same routing configuration on top of the 2 existing transistors.\n## Placement\nThe Wilson current mirror has 2 pairs of transistors which should be matched. Just like in a normal current mirror where the reference should be matched to the mirror, in this case the reference must be matched to the mirror. But, since we have 4 transistors, there are 2 references and 2 mirror transistors. There are several possible matching techniques that could be used including interdigitated placement (using the interdigitated place macro). One way to do this would be to place one interdigitated pair on top of another. There is a 4 interdigitated transistors place macro, if you use that you must specify top_row_device=\"nfet\" and bottom_row_device=\"nfet\".\n## Routing\nFor the purposes of this description, assume you are using interdigitated matching. In the interdigitated pair, one transistor is \"A\" and the other is \"B\". Take transistor \"A\" as the reference and transistor \"B\" as the mirror.\nRoute the source of top's reference transistor to the drain of bottom's reference transistor. Route the source of top's mirror transistor to the drain of the bottoms mirror transistor.\nThe top pair is routed by connecting the top reference gate to top reference drain, and the top reference gate to the top mirror gate. \nThe bottom pair is routed differently, by connecting the bottom mirror gate to the bottom mirror drain and the bottom reference gate to the bottom mirror gate. Additionally, for the bottom pair the sources are shorted."
}