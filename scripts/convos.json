{
    "BiasVoltageGenerator": "BiasVoltageGenerator\n// no imports\n// create parameters: src_width, load_width, src_length, load_length, src_multipliers, load_multipliers, src_fingers, load_fingers\n# figure 24 exactly\ncreate a float parameter called src_width\ncreate a float parameter called load_width\ncreate a float parameter called src_length\ncreate a float parameter called load_length \ncreate a int parameter called src_multipliers\ncreate a int parameter called load_multipliers\ncreate a int parameter called src_fingers\ncreate a int parameter called load_fingers\n// place\nplace a pmos called src with width=src_width, length=src_length, fingers=src_fingers, rmult=1, multipliers=src_multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True \nplace a nmos called load with width=load_width, length=load_length, fingers=load_fingers, rmult=1, multipliers=load_multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\n// more than one component has been placed, so move\nmove load below src\n// bias voltage generator, route drain to drain, gate to drain, and gate to source\nroute between src_drain_E and load_drain_E using smart_route\nroute between load_gate_E and load_drain_E using smart_route\nroute between src_gate_W and load_source_W using smart_route",
    "CascodeCommonGate": "CascodeCommonGate\n// no imports\n// create parameters: input_width, output_width, input_length, output_length, input_multipliers, output_multipliers, input_fingers, output_fingers\n# figure 12 exactly except output and input might be swapped\ncreate a float parameter called input_width\ncreate a float parameter called output_width\ncreate a float parameter called input_length\ncreate a float parameter called output_length\ncreate a int parameter called input_multipliers\ncreate a int parameter called output_multipliers\ncreate a int parameter called input_fingers\ncreate a int parameter called output_fingers\n// place\nplace a nmos called input with width=input_width, length=input_length, fingers=input_fingers, rmult=1, multipliers=input_multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called output with width=output_width, length=output_length, fingers=output_fingers, rmult=1, multipliers=output_multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\n// more than one component has been placed, so move\nmove output above input\n// cascode common gate, route source to drain\nroute between input_source_W and output_drain_W using smart_route\n",
    "CascodeCommonGateCommonCentroid": "CascodeCommonGateCommonCentroid\n// no imports\n// create parameters: width, length, fingers\ncreate a float parameter called width\ncreate a float parameter called length\ncreate a int parameter called fingers\n// place\nplace a common centroid pair called ccg with width=width, length=length, fingers=fingers\n// only one component placed, so no move\n// cascode common gate, route source to drain\nroute between ccg_A_source_W and ccg_B_drain_W using smart_route\n",
    "CascodeCommonGateInterdigitated": "CascodeCommonGateInterdigitated\n// no imports\n// create parameters: width, length, fingers\ncreate a float parameter called width\ncreate a float parameter called length\ncreate an int parameter called fingers\n// place\nplace an interdigitated nfet called CascodeCommonGate with numcols=fingers, dummy=True, with_substrate_tap=False, with_tie=True, kwargs={\"width\": width, \"length\": length, \"rmult\":1}\n// only one component placed, so no move\n// cascode common gate, route source to drain\nroute between CascodeCommonGate_A_source_W and CascodeCommonGate_B_drain_W using smart_route",
    "CascodeCommonSource": "CascodeCommonSource\n// no imports\n// create parameters: input_width, bias_width, input_length, bias_length, input_multiplier, bias_multiplier, input_fingers, bias_fingers\n# figure 11 exactly (until gnd is implemented)\ncreate a float parameter called input_width\ncreate a float parameter called bias_width\ncreate a float parameter called input_length\ncreate a float parameter called bias_length \ncreate a int parameter called input_multiplier\ncreate a int parameter called bias_multiplier\ncreate a int parameter called input_fingers\ncreate a int parameter called bias_fingers\n// place\nplace a nmos called input with width=input_width, length=input_length, fingers=input_fingers, rmult=1, multipliers=input_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called bias with width=bias_width, length=bias_length, fingers=bias_fingers, rmult=1, multipliers=bias_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\n// more than one component has been placed, so move\nmove input below bias\n// cascode common source, route source to drain\nroute between bias_source_W and input_drain_W using smart_route",
    "CascodeCommonSourceInterdigitated": "CascodeCommonSourceInterdigitated\n// no imports\n// create parameters: width, length, fingers\ncreate a float parameter called width\ncreate a float parameter called length\ncreate an int parameter called fingers\n// place\nplace an interdigitated nfet called CascodeCommonSource with numcols=fingers, dummy=True, with_substrate_tap=False, with_tie=True, kwargs={\"width\": width, \"length\": length, \"rmult\":1}\n// only one component placed, so no move\n// cascode common source, route source to drain\nroute between CascodeCommonSource_B_source_W and CascodeCommonSource_A_drain_W using smart_route",
    "ClassABStage": "ClassABStage\n// import required components\nimport PushPull\nimport CurrentMirrorNFET\n// create parameters: source_numcols, gm31_numcols, source_length, gm31_length, source_width, gm31_width\ncreate a float parameter called source_numcols\ncreate a float parameter called gm31_numcols\ncreate a float parameter called source_length\ncreate a float parameter called gm31_length\ncreate a float parameter called source_width\ncreate a float parameter called gm31_width\n// place\nplace a PushPull called pp1 \nplace a PushPull called pp2\nplace an interdigitated pfet called source with numcols=source_numcols, dummy=True, with_substrate_tap=False, with_tie=True, kwargs={ \"width\" : source_width , \"length\" : source_width}\nplace an interdigitated nfet called gm31 with numcols=gm31_numcols, dummy=True, with_substrate_tap=False, with_tie=True, kwargs={ \"width\" : gm31_width , \"length\" : gm31_length}\nplace a CurrentMirrorNFET called sink\n// more than one component has been placed, so move\nmove source above gm31\nmove pp1 right of gm31\nmove pp2 right of pp1\nmove sink below gm31\n// class AB stage, route components together\nroute between source_A_drain_E and gm31_A_drain_E using smart_route\nroute between source_B_drain_W and gm31_B_drain_W using smart_route\nroute between gm31_A_source_W and sink_cm_A_drain_W using smart_route\nroute between gm31_B_source_E and sink_cm_B_drain_E using smart_route\nroute between gm31_A_drain_E and pp1_c3_top_met_W using smart_route\nroute between gm31_B_drain_E and pp2_c3_top_met_W using smart_route",
    "ClassBPushPull": "ClassBPushPull\n# figure 19 exactly\n// no imports\n// create parameters: supply_width, absorb_width, supply_length, absorb_length, supply_multiplier, absorb_multiplier, supply_fingers, absorb_fingers\ncreate a float parameter called supply_width\ncreate a float parameter called absorb_width\ncreate a float parameter called supply_length\ncreate a float parameter called absorb_length \ncreate a int parameter called supply_multiplier\ncreate a int parameter called absorb_multiplier\ncreate a int parameter called supply_fingers\ncreate a int parameter called absorb_fingers\n// place\nplace a nmos called supply with width=supply_width, length=supply_length, fingers=supply_fingers, rmult=1, multipliers=supply_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called absorb with width=absorb_width, length=absorb_length, fingers=absorb_fingers, rmult=1, multipliers=absorb_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True\n// more than one component has been placed, so move\nmove absorb below supply\n// class B push pull amplifier, route source to source, and gate to gate\nroute between supply_source_W and absorb_source_W using smart_route\nroute between supply_gate_E and absorb_gate_E using smart_route",
    "ClassBPushPullInterdigitated": "ClassBPushPullInterdigitated\n// no imports\n// create parameters: width, length, fingers\ncreate a float parameter called width\ncreate a float parameter called length\ncreate an int parameter called fingers\n// place\nplace an interdigitated nfet called ClassBPushPull with numcols=fingers, dummy=True, with_substrate_tap=False, with_tie=True, kwargs={\"width\": width, \"length\": length, \"rmult\":1}\n// only one component placed, so no move\n// class B push pull amplifier, route source to source, and gate to gate\nroute between ClassBPushPull_A_source_W and ClassBPushPull_B_source_W using smart_route\nroute between ClassBPushPull_A_gate_E and ClassBPushPull_B_gate_E using smart_route",
    "CommonSourceAmplifier": "CommonSourceAmplifier\n// no imports\n// create parameters: input_width, bias_width, input_length, bias_length, input_multiplier, bias_multiplier, input_fingers, bias_fingers\n# figure 10 exactly, uses a pmos load and nmos amp\ncreate a float parameter called input_width\ncreate a float parameter called bias_width\ncreate a float parameter called input_length\ncreate a float parameter called bias_length \ncreate a int parameter called input_multiplier\ncreate a int parameter called bias_multiplier\ncreate a int parameter called input_fingers\ncreate a int parameter called bias_fingers\n// place\nplace a nmos called input with width=input_width, length=input_length, fingers=input_fingers, rmult=1, multipliers=input_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called bias with width=bias_width, length=bias_length, fingers=bias_fingers, rmult=1, multipliers=bias_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True\n// more than one component has been placed, so move\nmove input below bias\n// common source amplifier, route drain to source\nroute between input_drain_W and bias_source_W using smart_route",
    "CommonSourceAmplifierFoldedDiodeLoad": "CommonSourceAmplifierFoldedDiodeLoad\n# figure 18 exactly\n// no imports\n// create parameters: input_width, diode_width, input_length, diode_length, input_multiplier, diode_multiplier, input_fingers, diode_fingers\ncreate a float parameter called input_width\ncreate a float parameter called diode_width\ncreate a float parameter called input_length\ncreate a float parameter called diode_length \ncreate a int parameter called input_multiplier\ncreate a int parameter called diode_multiplier\ncreate a int parameter called input_fingers\ncreate a int parameter called diode_fingers\n// place\nplace a nmos called input with width=input_width, length=input_length, fingers=input_fingers, rmult=1, multipliers=input_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called diode with width=diode_width, length=diode_length, fingers=diode_fingers, rmult=1, multipliers=diode_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\n// more than one component has been placed, so move\nmove diode below input\n// common source amplifier with folded diode load, source to drain, gate to drain, and drain to drain\nroute between diode_gate_E and diode_drain_E using smart_route\nroute between input_source_W and diode_source_W using smart_route\nroute between input_drain_E and diode_drain_E using smart_route",
    "CommonSourceAmplifierWDiodeLoad": "CommonSourceAmplifierWDiodeLoad\n# FIGURE 17 exactly: The common-source amplifier\n# with diode load is sometimes called a wideband amplifier due to its potentially highspeed operation\n// no imports\n// create parameters: input_width, diode_width, input_length, diode_length, input_multiplier, diode_multiplier, input_fingers, diode_fingers\ncreate a float parameter called input_width\ncreate a float parameter called diode_width\ncreate a float parameter called input_length\ncreate a float parameter called diode_length \ncreate a int parameter called input_multiplier\ncreate a int parameter called diode_multiplier\ncreate a int parameter called input_fingers\ncreate a int parameter called diode_fingers\n// place\nplace a nmos called input with width=input_width, length=input_length, fingers=input_fingers, rmult=1, multipliers=input_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called diode with width=diode_width, length=diode_length, fingers=diode_fingers, rmult=1, multipliers=diode_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\n// more than one component has been placed, so move\nmove input below diode\n// common source amplifier with diode load, source to drain, and gate to drain\nroute between diode_source_W and input_drain_W using smart_route\nroute between diode_gate_E and diode_drain_E using smart_route",
    "ConstBiasVoltageGen": "ConstBiasVoltageGen\n// no imports\n// create parameters: source_width, load_width, source_length, load_length, source_multiplier, load_multiplier, source_fingers, load_fingers\n# figure 25 exactly: CONSTANT bias voltage generator\ncreate a float parameter called source_width\ncreate a float parameter called load_width\ncreate a float parameter called source_length\ncreate a float parameter called load_length \ncreate a int parameter called source_multiplier\ncreate a int parameter called load_multiplier\ncreate a int parameter called source_fingers\ncreate a int parameter called load_fingers\n// place\nplace a nmos called source with width=source_width, length=source_length, fingers=source_fingers, rmult=1, multipliers=source_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called load with width=load_width, length=load_length, fingers=load_fingers, rmult=1, multipliers=load_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\n// more than one component has been placed, so move\nmove load below source\n// bias voltage generator, route source to drain, gate to drain, and gate to source\nroute between source_source_E and load_drain_E using smart_route\nroute between load_gate_E and load_drain_E using smart_route\nroute between source_gate_W and load_source_W using smart_route",
    "CrossCoupledInverters": "CrossCoupledInverters\n// no imports\n// create parameters: ccinvs_length, ccinvs_fingers\n# Create a float parameter called nfet_width\n# Create a float parameter called pfet_width\nCreate a float parameter called ccinvs_length\nCreate an int parameter called ccinvs_fingers\n// place\nplace 4 interdigitated transistors called ccinvs with numcols=ccinvs_fingers, length=ccinvs_length, top_row_device=\"pfet\", bottom_row_device=\"nfet\"\n// only one component placed, so no move\n// cross coupled inverters, route both inverters together\n# sources are connected to pwr and gnd respectively\n#route between ccinvs_top_A_source_E and ccinvs_top_B_source_E using smart_route\n#route between ccinvs_bottom_A_source_E and ccinvs_bottom_B_source_E using smart_route\n# output of each inverter goes to input of the other inverter using smart_route\nroute between ccinvs_top_A_drain_E and ccinvs_top_B_gate_E using smart_route\nroute between ccinvs_bottom_A_drain_E and ccinvs_bottom_B_gate_E using smart_route\nroute between ccinvs_top_B_drain_E and ccinvs_top_A_gate_E using smart_route\nroute between ccinvs_bottom_B_drain_E and ccinvs_bottom_A_gate_E using smart_route\n# connect nfet and pfet of each inverter at the gate using smart_route\nroute between ccinvs_top_B_gate_E and ccinvs_bottom_B_gate_E using smart_route\nroute between ccinvs_top_A_gate_W and ccinvs_bottom_A_gate_W using smart_route",
    "CTATVGen": "CTATVGen\n// no imports\n// create parameters: src_width, load_width, src_length, load_length, src_multiplier, load_multiplier, src_fingers, load_fingers\n# CTAT without body effect\ncreate a float parameter called src_width\ncreate a float parameter called load_width\ncreate a float parameter called src_length\ncreate a float parameter called load_length \ncreate a int parameter called src_multiplier\ncreate a int parameter called load_multiplier\ncreate a int parameter called src_fingers\ncreate a int parameter called load_fingers\n// place\nplace a nmos called src with width=src_width, length=src_length, fingers=src_fingers, rmult=1, multipliers=src_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called load with width=load_width, length=load_length, fingers=load_fingers, rmult=1, multipliers=load_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\n// more than one component has been placed, so move\nmove load below src\n// CTAT, route drain to source\nroute between src_drain_W and load_source_W using smart_route\n",
    "CurrentMirrorNtype": "CurrentMirrorNtype\n# ntype current mirror \n// no imports\n// create parameters: reference_width, mirror_width, reference_length, mirror_length, reference_multiplier, mirror_multiplier, reference_fingers, mirror_fingers\ncreate a float parameter called reference_width\ncreate a float parameter called mirror_width\ncreate a float parameter called reference_length\ncreate a float parameter called mirror_length \ncreate a int parameter called reference_multiplier\ncreate a int parameter called mirror_multiplier\ncreate a int parameter called reference_fingers\ncreate a int parameter called mirror_fingers\n// place\nplace a nmos called reference with width=reference_width, length=reference_length, fingers=reference_fingers, rmult=1, multipliers=reference_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called mirror with width=mirror_width, length=mirror_length, fingers=mirror_fingers, rmult=1, multipliers=mirror_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\n// more than one component has been placed, so move\nmove mirror to the right of reference\n// current mirror, route reference gate to mirror gate, reference drain to reference gate, and reference source to mirror source\nroute between reference_gate_E and mirror_gate_E using smart_route\nroute between mirror_drain_E and mirror_gate_E using smart_route\nroute between mirror_source_E and mirror_source_E using smart_route\n",
    "CurrentMirrorNtypeCommonCentroid": "CurrentMirrorNtypeCommonCentroid\n// no imports\n// create parameters: width, length, fingers\ncreate a float parameter called width\ncreate a float parameter called length\ncreate a int parameter called fingers\n// place\nplace a common centroid pair called cmirror with width=width, length=length, fingers=fingers\n// only one component placed, so no move\n// current mirror, route reference gate to mirror gate, reference drain to reference gate, and reference source to mirror source\nroute between cmirror_A_source_E and cmirror_B_source_E\nroute between cmirror_A_drain_E and cmirror_B_gate_E\nroute between cmirror_A_gate_E and cmirror_B_gate_E",
    "CurrentMirrorNtypeInterdigitated": "CurrentMirrorNtypeInterdigitated\n// no imports\n// create parameters: width, length, fingers\ncreate a float parameter called width\ncreate a float parameter called length\ncreate an int parameter called fingers \n// place\nplace an interdigitated nfet called cm with numcols=fingers, dummy=True, with_substrate_tap=False, with_tie=True, kwargs={\"width\": width, \"length\": length, \"rmult\":1}\n// only one component placed, so no move\n// current mirror, route reference gate to mirror gate, reference drain to reference gate, and reference source to mirror source\nroute between cm_A_gate_E and cm_B_gate_E using smart_route\nroute between cm_A_drain_E and cm_A_gate_E using smart_route\nroute between cm_A_source_E and cm_B_source_E using smart_route",
    "CurrentMirrorPtype": "CurrentMirrorPtype\n# Todo rename stuff\n# ntype current mirror\n// no imports\n// create parameters: reference_width, mirror_width, reference_length, mirror_length, reference_multiplier, mirror_multiplier, reference_fingers, mirror_fingers\ncreate a float parameter called reference_width\ncreate a float parameter called mirror_width\ncreate a float parameter called reference_length\ncreate a float parameter called mirror_length \ncreate a int parameter called reference_multiplier\ncreate a int parameter called mirror_multiplier\ncreate a int parameter called reference_fingers\ncreate a int parameter called mirror_fingers\n// place\nplace a pmos called reference with width=reference_width, length=reference_length, fingers=reference_fingers, rmult=1, multipliers=reference_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True\nplace a pmos called mirror with width=mirror_width, length=mirror_length, fingers=mirror_fingers, rmult=1, multipliers=mirror_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True\n// more than one component has been placed, so move\nmove mirror to the right of reference\n// current mirror, route reference gate to mirror gate, reference drain to reference gate, and reference source to mirror source\nroute between reference_gate_E and mirror_gate_E using smart_route\nroute between mirror_drain_E and mirror_gate_E using smart_route\nroute between mirror_source_E and mirror_source_E using smart_route",
    "CurrentMirrorPtypeInterdigitated": "CurrentMirrorPtypeInterdigitated\n// no imports\n// create parameters: width, length, fingers\ncreate a float parameter called width\ncreate a float parameter called length\ncreate an int parameter called fingers\n// place\nplace an interdigitated pfet called cm with numcols=fingers, dummy=True, with_substrate_tap=False, with_tie=True, kwargs={\"width\": width, \"length\": length, \"rmult\":1}\n// only one component placed, so no move\n// current mirror, route reference gate to mirror gate, reference drain to reference gate, and reference source to mirror source\nroute between cm_A_gate_E and cm_B_gate_E using smart_route\nroute between cm_A_drain_E and cm_A_gate_E using smart_route\nroute between cm_A_source_E and cm_B_source_E using smart_route",
    "DegenCommonGate": "DegenCommonGate\n# figure 21\n# The degeneration of M1 can be adapted by tuning Vbias.\n// no imports\n// create parameters: isrc_width, load_width, isrc_length, load_length, isrc_multiplier, load_multiplier, isrc_fingers, load_fingers\ncreate a float parameter called isrc_width\ncreate a float parameter called load_width\ncreate a float parameter called isrc_length\ncreate a float parameter called load_length\ncreate a int parameter called isrc_multiplier\ncreate a int parameter called load_multiplier\ncreate a int parameter called isrc_fingers\ncreate a int parameter called load_fingers\n// place\nplace a nmos called isrc with width isrc_width, length isrc_length, fingers isrc_fingers, rmult 1, multipliers isrc_multiplier, with_substrate_tap False, with_tie True, with_dummy True, with_dnwell False\nplace a nmos called load with width load_width, length load_length, fingers load_fingers, rmult 1, multipliers load_multiplier, with_substrate_tap False, with_tie True, with_dummy True, with_dnwell False\n// more than one component has been placed, so move\nmove load below isrc\n// degen common gate, route source to drain\nroute between isrc_source_W and load_drain_W using smart_route\n# route between load_tie_br_top_met_S and isrc_tie_tr_top_met_N using smart_route\n",
    "DegenCommonSource": "DegenCommonSource\n// no imports\n// create parameters: isrc_width, degen_width, isrc_length, degen_length, isrc_multiplier, degen_multiplier, isrc_fingers, degen_fingers\n# figure 20 exactly\ncreate a float parameter called isrc_width\ncreate a float parameter called degen_width\ncreate a float parameter called isrc_length\ncreate a float parameter called degen_length\ncreate a int parameter called isrc_multiplier\ncreate a int parameter called degen_multiplier\ncreate a int parameter called isrc_fingers\ncreate a int parameter called degen_fingers\n// place\nplace a nmos called isrc with width=isrc_width, length=isrc_length, fingers=isrc_fingers, rmult=1, multipliers=isrc_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called degen with width=degen_width, length=degen_length, fingers=degen_fingers, rmult=1, multipliers=degen_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\n// more than one component has been placed, so move\nmove degen below isrc\n// degen common source, route source to drain, and gate to gate\nroute between isrc_source_W and degen_drain_W using smart_route\nroute between isrc_gate_E and degen_gate_E using smart_route\n# route between degen_tie_br_top_met_S and isrc_tie_tr_top_met_N using straight_route",
    "DeltaSigmaModulator": "DeltaSigmaModulator\nimport OpAmp\nimport PassiveComponents\nimport LatchedComparator\nplace an OpAmp called oa \nplacer a PassiveComponents called passive\nplace a LatchedComparator called lc with n_latch_width 1 p_latch_width 1 \nmove passive above oa\nmove lc right next to oa\n# Route outp/nm to the bottom metal of the capacitors\nroute between oa_abstage_pp1_p1_multiplier_0_drain_E and passive_c1_bottom_met_E using c_route with extension=2\nroute between oa_abstage_pp2_p1_multiplier_0_drain_E and passive_c2_bottom_met_E using c_route with extension=2\n# Route Ri to inputs of OpAmp\nroute between passive_ri1_pfet_multiplier_0_source_W and oa_finteg_gm1_B_gate_W using c_route with extension=5\nroute between passive_ri2_pfet_multiplier_0_source_E and oa_abstage_gm31_A_gate_E using c_route with extension=3",
    "DiffPair": "DiffPair\n// no imports\n// create parameters: vin1_width, vin2_width, vin1_length, vin2_length, vin1_multiplier, vin2_multiplier, vin1_fingers, vin2_fingers\ncreate a float parameter called vin1_width\ncreate a float parameter called vin2_width\ncreate a float parameter called vin1_length\ncreate a float parameter called vin2_length\ncreate a int parameter called vin1_multiplier\ncreate a int parameter called vin2_multiplier\ncreate a int parameter called vin1_fingers\ncreate a int parameter called vin2_fingers\n// place\nplace a nmos called vin1 with width=vin1_width, length=vin1_length, fingers=vin1_fingers, rmult=1, multipliers=vin1_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called vin2 with width=vin2_width, length=vin2_length, fingers=vin2_fingers, rmult=1, multipliers=vin2_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\n// more than one component has been placed, so move\nmove vin1 to the left of vin2\n// differential pair only has one route which is source to source\nroute between vin1_source_N and vin2_source_N using smart_route\n",
    "FourStageIntegrator": "OpAmp\nimport FIntegrator\nimport SIntegrator\nimport TIntegrator\nimport ClassABStage\nplace a FIntegrator called finteg\nplace a SIntegrator called sinteg \nplace a TIntegrator called tinteg \nplace a ClassABStage called abstage \nmove sinteg right next to finteg\nmove tinteg right next to sinteg \nmove abstage right next to tinteg\n# Route inp\nroute between finteg_gm1_A_gate_E and sinteg_gm2_A_gate_W using straight_route\nroute between sinteg_gm2_A_gate_E and tinteg_gm32_A_gate_W using straight_route\nroute between tinteg_gm32_A_gate_E and abstage_gm31_A_gate_W using straight_route\n# Route inn\nroute between finteg_gm1_B_gate_E and sinteg_gm2_B_gate_W using straight_route\nroute between sinteg_gm2_B_gate_E and tinteg_gm32_B_gate_W using straight_route\nroute between tinteg_gm32_B_gate_E and abstage_gm31_B_gate_W using straight_route\n# Route the drains of gm1 to the gates of gm4\nroute between finteg_sink_cm_A_drain_E and sinteg_gm4_B_gate_W using snake_route with extension=2\nroute between finteg_sink_cm_B_drain_E and sinteg_gm4_A_gate_W using snake_route with extension=3\n# Route the drains of gm2 to the gates of gm5\nroute between sinteg_sink_cm_A_drain_E and tinteg_gm5_B_gate_W using snake_route with viaoffset=(False, False)\nroute between sinteg_sink_cm_B_drain_E and tinteg_gm5_A_gate_W using snake_route with extension=2 viaoffset=(False, False)\n# Route the drains of gm32 to the gates of class ab nfets\nroute between tinteg_gm5_A_drain_E and abstage_pp1_n1_multiplier_0_gate_E using c_route\nroute between tinteg_gm5_B_drain_E and abstage_pp2_n1_multiplier_0_gate_E using c_route",
    "IntegratorStage": "IntegratorStage\n# Make the first integrator\nimport CurrentMirrorPFET\nimport CurrentMirrorNFET\n# Make the diff pair\n# TODO: parametrize this\nplace an interdigitated pfet called gm1 with numcols=2, dummy=True, with_substrate_tap=False, with_tie=True, tie_layers=(\"met2\",\"met1\"), kwargs={ \"width\" : 1 , \"length\" : 1}\nplace a CurrentMirrorPFET called source\nplace a CurrentMirrorNFET called sink\nplace an interdigitated nfet called dummy with numcols=2, dummy=True, with_substrate_tap=False, with_tie=True, tie_layers=(\"met2\",\"met1\"), kwargs={ \"width\" : 1 , \"length\" : 1}\nmove source above gm1 \nmove dummy below gm1\nmove sink below dummy\n# short sources of the diffpair\nroute between gm1_A_source_E and gm1_B_source_E\n# Connect the drain of source's B to the source of the diffpairs\nroute between gm1_A_source_W and source_cm_B_drain_W using c_route with extension=2\n# Connect the drains of the diffpair to the drains of the sink\nroute between gm1_A_drain_E and sink_cm_A_drain_E using smart_route\nroute between gm1_B_drain_W and sink_cm_B_drain_W using c_route",
    "Inverter": "Inverter\n// no imports\n// create parameters: pullup_width, pulldown_width, pullup_length, pulldown_length, pullup_multiplier, pulldown_multiplier, pullup_fingers, pulldown_fingers\n# paramterize everything like an analog cell\ncreate a float parameter called pullup_width\ncreate a float parameter called pulldown_width\ncreate a float parameter called pullup_length\ncreate a float parameter called pulldown_length\ncreate a int parameter called pullup_multiplier\ncreate a int parameter called pulldown_multiplier\ncreate a int parameter called pullup_fingers\ncreate a int parameter called pulldown_fingers\n// place\nplace a pmos called pullup with width=pullup_width, length=pullup_length, fingers=pullup_fingers, rmult=1, multipliers=pullup_multiplier, with_substrate_tap=False, with_tie=False, with_dummy=False \nplace a nmos called pulldown with width=pulldown_width, length=pulldown_length, fingers=pulldown_fingers, rmult=1, multipliers=pulldown_multiplier, with_substrate_tap=False, with_tie=False, with_dummy=False, with_dnwell=False\n// more than one component has been placed, so move\nmove pullup above pulldown\n// inverter, route pmos source to nmos drain, and short the gates\nroute between pullup_source_W and pulldown_drain_W using smart_route\nroute between pullup_gate_W and pulldown_gate_W using smart_route",
    "LowNoiseAmp": "LowNoiseAmp\n// no imports\n// create parameters: input_width, gain_width, input_length, gain_length, input_multiplier, gain_multiplier, input_fingers, gain_fingers\n# figure 23 exactly\ncreate a float parameter called input_width\ncreate a float parameter called gain_width\ncreate a float parameter called input_length\ncreate a float parameter called gain_length\ncreate a int parameter called input_multiplier\ncreate a int parameter called gain_multiplier\ncreate a int parameter called input_fingers\ncreate a int parameter called gain_fingers\n// place\nplace a nmos called input with width=input_width, length=input_length, fingers=input_fingers, rmult=1, multipliers=input_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called gain with width=gain_width, length=gain_length, fingers=gain_fingers, rmult=1, multipliers=gain_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\n// more than one component has been placed, so move\nmove gain below \n// low noise amplifier, route source to drain and gate to source\nroute between input_source_W and gain_drain_W using smart_route\nroute between input_gate_E and gain_source_E using smart_route",
    "MimcapArray": "MimcapArray\n// no imports\n// create parameters: mimcap_size_x, mimcap_size_y\ncreate a float parameter called mimcap_size_x\ncreate a float parameter called mimcap_size_y\n# 2 rows by 3 cols\n// place 2*3=6 array elements\nplace a mimcap called element1 with size=(mimcap_size_x,mimcap_size_y)\nplace a mimcap called element2 with size=(mimcap_size_x,mimcap_size_y)\nplace a mimcap called element3 with size=(mimcap_size_x,mimcap_size_y)\nplace a mimcap called element4 with size=(mimcap_size_x,mimcap_size_y)\nplace a mimcap called element5 with size=(mimcap_size_x,mimcap_size_y)\nplace a mimcap called element6 with size=(mimcap_size_x,mimcap_size_y)\n// array from bottom left to top right\n// first row\nmove element2 to the right of element1\nmove element3 to the right of element2\n// second row\nmove element4 above element1\nmove element5 above element1\nmove element6 above element1\nmove element5 to the right of element4\nmove element6 to the right of element5\n// route top_met_ of the mimcaps and bottom_met_ of the mimcaps\n# route top met\nroute between element1_top_met_E and element2_top_met_W using smart_route\nroute between element2_top_met_E and element3_top_met_W using smart_route\nroute between element4_top_met_E and element5_top_met_W using smart_route\nroute between element5_top_met_E and element6_top_met_W using smart_route\nroute between element1_top_met_N and element4_top_met_S using smart_route\nroute between element2_top_met_N and element5_top_met_S using smart_route\nroute between element3_top_met_N and element6_top_met_S using smart_route\n# route bottom met\nroute between element1_bottom_met_E and element2_bottom_met_W using smart_route\nroute between element2_bottom_met_E and element3_bottom_met_W using smart_route\nroute between element4_bottom_met_E and element5_bottom_met_W using smart_route\nroute between element5_bottom_met_E and element6_bottom_met_W using smart_route\nroute between element1_bottom_met_N and element4_bottom_met_S using smart_route\nroute between element2_bottom_met_N and element5_bottom_met_S using smart_route\nroute between element3_bottom_met_N and element6_bottom_met_S using smart_route",
    "NAND": "NAND\n// no imports\n// create parameters: pullup_width, pulldown_width, pullup_length, pulldown_length, pullup_multiplier, pulldown_multiplier, pullup_fingers, pulldown_fingers\ncreate a float parameter called pullup_width\ncreate a float parameter called pulldown_width\ncreate a float parameter called pullup_length\ncreate a float parameter called pulldown_length\ncreate a int parameter called pullup_multiplier\ncreate a int parameter called pulldown_multiplier\ncreate a int parameter called pullup_fingers\ncreate a int parameter called pulldown_fingers\n// place\nplace a nmos called pulldown1 with width=pulldown_width, length=pulldown_length, fingers=pulldown_fingers, rmult=1, multipliers=1, with_substrate_tap=False, with_tie=False, with_dummy=False \nplace a nmos called pulldown2 with width=pulldown_width, length=pulldown_length, fingers=pulldown_fingers, rmult=1, multipliers=1, with_substrate_tap=False, with_tie=False, with_dummy=False \nplace a pmos called pullup1 with width=pullup_width, length=pullup_length, fingers=pullup_fingers, rmult=1, multipliers=1, with_substrate_tap=False, with_tie=False, with_dummy=False \nplace a pmos called pullup2 with width=pullup_width, length=pullup_length, fingers=pullup_fingers, rmult=1, multipliers=1, with_substrate_tap=False, with_tie=False, with_dummy=False \n// more than one component has been placed, so move\nmove pullup1 above pulldown1\nmove pulldown2 to the right of pulldown1\nmove pullup2 north of pulldown1\nmove pullup2 to the right of pullup1\n// nand gate, route pulldown network, pullup network, and connect the pullup to pulldown network\nroute between pulldown1_drain_E and pulldown2_source_W using smart_route\nroute between pulldown2_drain_W and pullup1_drain_W using smart_route\nroute between pullup1_source_W and pullup2_source_W using smart_route\nroute between pullup1_drain_W and pullup2_drain_W using smart_route",
    "NMOSArray2x5": "NMOSArray2x5\n# 2 rows by 5 cols array of nmos transistors (no routing)\n// no imports\n// create parameters: width, length, multipliers, fingers\ncreate a float parameter called width\ncreate a float parameter called length\ncreate a int parameter called multipliers\ncreate a int parameter called fingers\n// place 2*5=10 array elements\nplace a nmos called element1 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element2 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element3 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element4 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element5 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element6 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element7 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element8 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element9 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element10 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\n// move first row into position\nmove element2 to the right of element1\nmove element3 to the right of element2\nmove element4 to the right of element3\nmove element5 to the right of element4\n// move second row above first row\nmove element6 above element1\nmove element7 above element1\nmove element8 above element1\nmove element9 above element1\nmove element10 above element1\nmove element7 to the right of element6\nmove element8 to the right of element7\nmove element9 to the right of element8\nmove element10 to the right of element9\n// no routing\n",
    "NMOSArray4x3": "NMOSArray4x3\n# 4 rows by 3 cols array of nmos transistors (no routing)\n// no imports\n// create parameters: width, length\ncreate a float parameter called width\ncreate a float parameter called length\n// place 4*3=12 array elements\nplace a nmos called element1 with width=width, length=length, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element2 with width=width, length=length, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element3 with width=width, length=length, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element4 with width=width, length=length, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element5 with width=width, length=length, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element6 with width=width, length=length, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element7 with width=width, length=length, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element8 with width=width, length=length, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element9 with width=width, length=length, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element10 with width=width, length=length, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element11 with width=width, length=length, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called element12 with width=width, length=length, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\n// move first row into position\nmove element2 to the right of element1\nmove element3 to the right of element2\n// move second row above first row\nmove element4 above element1\nmove element5 above element1\nmove element6 above element1\nmove element5 to the right of element4\nmove element6 to the right of element5\n// move third row above second row\nmove element7 above element4\nmove element8 above element4\nmove element9 above element4\nmove element8 to the right of element7\nmove element9 to the right of element8\n// move fourth row above third row\nmove element10 above element7\nmove element11 above element7\nmove element12 above element7\nmove element11 to the right of element10\nmove element12 to the right of element11\n// no routing",
    "NoiseXDiffConv": "NoiseXDiffConv\n# figure 22 exactly\n# common gate into common source (give more descriptive name)\n// no imports\n// create parameters: width_m1, width_m2, length_m1, length_m2, m1_multiplier, m2_multiplier, m1_fingers, m2_fingers\ncreate a float parameter called width_m1\ncreate a float parameter called width_m2\ncreate a float parameter called length_m1\ncreate a float parameter called length_m2 \ncreate a int parameter called m1_multiplier\ncreate a int parameter called m2_multiplier\ncreate a int parameter called m1_fingers\ncreate a int parameter called m2_fingers\n// place\nplace a nmos called m1 with width=width_m1, length=length_m1, fingers=m1_fingers, rmult=1, multipliers=m1_multiplier, with_substrate_tap=False, with_tie=True, sd_rmult=1, gate_rmult=1, interfinger_rmult=1, with_dummy=True, with_dnwell=False\nplace a nmos called m2 with width=width_m2, length=length_m2, fingers=m2_fingers, rmult=1, multipliers=m2_multiplier, with_substrate_tap=False, with_tie=True, sd_rmult=1, gate_rmult=1, interfinger_rmult=1, with_dummy=True, with_dnwell=False\n// more than one component has been placed, so move\nmove m1 below m2\n// NoiseXDiffConv route gate to source\nroute between m1_gate_E and m2_source_E using smart_route\n# route between m1_tie_br_top_met_S and m2_tie_tr_top_met_N using straight_route\n",
    "NOR": "NOR\n// no imports\n// create parameters: pullup_width, pulldown_width, pullup_length, pulldown_length, pullup_multiplier, pulldown_multiplier, pullup_fingers, pulldown_fingers\ncreate a float parameter called pullup_width\ncreate a float parameter called pulldown_width\ncreate a float parameter called pullup_length\ncreate a float parameter called pulldown_length\ncreate a int parameter called pullup_multiplier\ncreate a int parameter called pulldown_multiplier\ncreate a int parameter called pullup_fingers\ncreate a int parameter called pulldown_fingers\n// place\nplace a nmos called pulldown1 with width=pulldown_width, fingers=pulldown_fingers, rmult=1, multipliers=pulldown_multiplier, with_substrate_tap=False, with_tie=False, with_dummy False \nplace a nmos called pulldown2 with width=pulldown_width, fingers=pulldown_fingers, rmult=1, multipliers=pulldown_multiplier, with_substrate_tap=False, with_tie=False, with_dummy False \nplace a pmos called pullup1 with width=pullup_width, fingers=pullup_fingers, rmult=1, multipliers=pullup_multiplier, with_substrate_tap=False, with_tie=False, with_dummy False \nplace a pmos called pullup2 with width=pullup_width, fingers=pullup_fingers, rmult=1, multipliers=pullup_multiplier, with_substrate_tap=False, with_tie=False, with_dummy False \n// more than one component has been placed, so move\nmove pullup1 above pulldown1\nmove pulldown2 to the right of pulldown1\nmove pullup2 north of pulldown1\nmove pullup2 to the right of pullup1\n// Nor gate, route source to source, drain to drain for pullup and pulldown, and source to drain\nroute between pulldown1_source_W and pulldown2_source_W using smart_route\nroute between pulldown1_drain_W and pulldown2_drain_W using smart_route\nroute between pulldown1_drain_W and pullup1_drain_W using smart_route\nroute between pullup1_source_W and pullup2_drain_W using smart_route",
    "PMOSArray2x5": "PMOSArray2x5\n# 2 rows by 5 cols array of pmos transistors (no routing)\n// no imports\n// create parameters: length, fingers\ncreate a float parameter called length\ncreate a int parameter called fingers\n// place 2*5=10 array elements\nplace a pmos called element1 with length=length, fingers=fingers, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element2 with length=length, fingers=fingers, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element3 with length=length, fingers=fingers, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element4 with length=length, fingers=fingers, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element5 with length=length, fingers=fingers, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element6 with length=length, fingers=fingers, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element7 with length=length, fingers=fingers, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element8 with length=length, fingers=fingers, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element9 with length=length, fingers=fingers, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element10 with length=length, fingers=fingers, rmult=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\n// move first row into position\nmove element2 to the right of element1\nmove element3 to the right of element2\nmove element4 to the right of element3\nmove element5 to the right of element4\n// move second row above first row\nmove element6 above element1\nmove element7 above element1\nmove element8 above element1\nmove element9 above element1\nmove element10 above element1\nmove element7 to the right of element6\nmove element8 to the right of element7\nmove element9 to the right of element8\nmove element10 to the right of element9\n// no routing\n",
    "PMOSArray4x3": "PMOSArray4x3\n# 4 rows by 3 cols array of nmos transistors (no routing)\n// no imports\n// create parameters: width, length, multipliers, fingers\ncreate a float parameter called width\ncreate a float parameter called length\ncreate a int parameter called multipliers\ncreate a int parameter called fingers\n// place 4*3=12 array elements\nplace a pmos called element1 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element2 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element3 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element4 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element5 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element6 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element7 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element8 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element9 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element10 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element11 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called element12 with width=width, length=length, fingers=fingers, rmult=1, multipliers=multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\n// move first row into position\nmove element2 to the right of element1\nmove element3 to the right of element2\n// move second row above first row\nmove element4 above element1\nmove element5 above element1\nmove element6 above element1\nmove element5 to the right of element4\nmove element6 to the right of element5\n// move third row above second row\nmove element7 above element4\nmove element8 above element4\nmove element9 above element4\nmove element8 to the right of element7\nmove element9 to the right of element8\n// move fourth row above third row\nmove element10 above element7\nmove element11 above element7\nmove element12 above element7\nmove element11 to the right of element10\nmove element12 to the right of element11\n// no routing",
    "PTATVoltageGen": "PTATVoltageGen\n# figure 26 exactly\n// no imports\n// create parameters: bias_width, mirror_width, bias_length, mirror_length, bias_multiplier, mirror_multiplier, bias_fingers, mirror_fingers\ncreate a float parameter called bias_width\ncreate a float parameter called mirror_width\ncreate a float parameter called bias_length\ncreate a float parameter called mirror_length\ncreate a int parameter called bias_multiplier\ncreate a int parameter called mirror_multiplier\ncreate a int parameter called bias_fingers\ncreate a int parameter called mirror_fingers\n// place\nplace a nmos called bias with width=bias_width, length=bias_length, fingers=bias_fingers, rmult=1, multipliers=bias_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called mirror with width=mirror_width, length=mirror_length, fingers=mirror_fingers, rmult=1, multipliers=mirror_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\n// more than one component has been placed, so move\nmove bias below mirror\n// PTAT, route source to drain, gate to gate, and gate to drain\nroute between mirror_source_E and bias_drain_E using smart_route\nroute between mirror_gate_W and bias_gate_W using smart_route\nroute between mirror_gate_W and mirror_drain_W using smart_route",
    "PTypeDiffPair": "PTypeDiffPair \n// no imports\n// create parameters: vin1_width, vin2_width, vin1_length, vin2_length, vin1_multiplier, vin2_multiplier, vin1_fingers, vin2_fingers\ncreate a float parameter called vin1_width\ncreate a float parameter called vin2_width\ncreate a float parameter called vin1_length\ncreate a float parameter called vin2_length\ncreate a int parameter called vin1_multiplier\ncreate a int parameter called vin2_multiplier\ncreate a int parameter called vin1_fingers\ncreate a int parameter called vin2_fingers\n// place\nplace a pmos called vin1 with width=vin1_width, length=vin1_length, fingers=vin1_fingers, rmult=1, multipliers=vin1_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True\nplace a pmos called vin2 with width=vin2_width, length=vin2_length, fingers=vin2_fingers, rmult=1, multipliers=vin2_multiplier, with_substrate_tap=False, with_tie=True, with_dummy=True\n// more than one component has been placed, so move\nmove vin1 to the left of vin2\n// differential pair only has one route which is source to source\nroute between vin1_source_E and vin2_source_W using smart_route",
    "PushPull": "PushPull\n// no imports\n// create parameters: p1_width, n1_width, p1_length, n1_length, p1_fingers, n1_fingers\ncreate a parameter called p1_width\ncreate a parameter called n1_width\ncreate a parameter called p1_length\ncreate a parameter called n1_length\ncreate a parameter called p1_fingers\ncreate a parameter called n1_fingers\n// place\nplace a pmos called p1 with width=p1_width, length=p1_length, fingers=p1_fingers, rmult=1, multipliers=1, with_substrate_tap=False, with_tie=True, with_dummy=True,\nplace a nmos called n1 with width=n1_width, length=n1_length, fingers=n1_fingers, rmult=1, multipliers=1, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a mimcap called c3\nplace a mimcap called c5\n// more than one component has been placed, so move\nmove p1 right next to c3\nmove c5 below c3\nmove n1 below p1\nmove n1 right next to c5\n// push pull amplifier, route the transistors to the mimcaps, and drain to drain\nroute between p1_drain_W and c3_bottom_met_E using smart_route\nroute between p1_gate_W and c3_top_met_E using smart_route\nroute between p1_drain_E and n1_drain_E using smart_route\nroute between n1_drain_W and c5_bottom_met_E using smart_route\nroute between n1_gate_W and c5_top_met_E using smart_route",
    "RegulatedCascode": "RegulatedCascode\n# figure 48\n// no imports\n// create parameters: cascode_width, feedback_width, cascode_length, feedback_length, cascode_multiplier, feedback_multiplier, cascode_fingers, feedback_fingers\ncreate a float parameter called cascode_width\ncreate a float parameter called feedback_width\ncreate a float parameter called cascode_length\ncreate a float parameter called feedback_length\ncreate a int parameter called cascode_multiplier\ncreate a int parameter called feedback_multiplier\ncreate a int parameter called cascode_fingers\ncreate a int parameter called feedback_fingers\n// place\nplace a nmos called cascode with width=cascode_width, length=cascode_length, fingers=cascode_fingers, rmult=1, multipliers=cascode_multiplier, with_substrate_tap=False, with_tie=False, with_dummy=False \nplace a nmos called feedback with width=feedback_width, length=feedback_length, fingers=feedback_fingers, rmult=1, multipliers=feedback_multiplier, with_substrate_tap=False, with_tie=False, with_dummy=False \n// more than one component has been placed, so move\nmove feedback below cascode\n// regulated cascode, route gate to drain, and gate to source\nroute between cascode_gate_E and feedback_drain_E using smart_route\nroute between feedback_gate_W and feedback_source_W using smart_route\n",
    "SourceFollow": "SourceFollow\n# figure 9 exactly\n// no imports\n// create parameters: srcfoll_width, isrc_width, srcfoll_length, isrc_length, srcfoll_multiplier, isrc_multiplier, srcfoll_fingers, isrc_fingers\ncreate a float parameter called srcfoll_width\ncreate a float parameter called isrc_width\ncreate a float parameter called srcfoll_length \ncreate a float parameter called isrc_length \ncreate a int parameter called srcfoll_multiplier\ncreate a int parameter called isrc_multiplier\ncreate a int parameter called srcfoll_fingers\ncreate a int parameter called isrc_fingers\n// place\nplace a nmos called srcfoll with width=srcfoll_width, length=srcfoll_length, fingers=srcfoll_fingers, rmult=1, multipliers=srcfoll_multiplier, with_substrate_tap=False, with_tie=False, with_dummy=False \nplace a nmos called isrc with width=isrc_width, length=isrc_length, fingers=isrc_fingers, rmult=1, multipliers=isrc_multiplier, with_substrate_tap=False, with_tie=False, with_dummy=False \n// more than one component has been placed, so move\nmove isrc below srcfoll\n// source follower, route source to drain\nroute between srcfoll_source_W and isrc_drain_W using smart_route\n",
    "StrongArmLatch": "StrongArmLatch\n// import required components\nimport CrossCoupledInverters\n// create parameters: bridge_width, clkgnd_width, clkpwr_width, bridge_length, clkgnd_length, clkpwr_length, ccinvs_length, bridge_multipliers, clkgnd_multipliers, clkpwr_multipliers, bridge_fingers, clkgnd_fingers, clkpwr_fingers, ccinvs_fingers\ncreate a float parameter called bridge_width\ncreate a float parameter called clkgnd_width\ncreate a float parameter called clkpwr_width\ncreate a float parameter called bridge_length\ncreate a float parameter called clkgnd_length\ncreate a float parameter called clkpwr_length\ncreate a float parameter called ccinvs_length\ncreate a int parameter called bridge_multipliers\ncreate a int parameter called clkgnd_multipliers\ncreate a int parameter called clkpwr_multipliers\ncreate a int parameter called bridge_fingers\ncreate a int parameter called clkgnd_fingers\ncreate a int parameter called clkpwr_fingers\ncreate a int parameter called ccinvs_fingers\n// place\nplace a diff pair called inputdiff\nplace a CrossCoupledInverters called ccinvs with ccinvs_fingers=ccinvs_fingers, ccinvs_length=ccinvs_length\nplace a nmos called clkgnd with width=clkgnd_width, length=clkgnd_length, fingers=clkgnd_fingers, rmult=1, multipliers=clkgnd_multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a nmos called bridge with width=bridge_width, length=bridge_length, fingers=bridge_fingers, rmult=1, multipliers=bridge_multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True, with_dnwell=False\nplace a pmos called clkpwrL with width=clkpwr_width, length=clkpwr_length, fingers=clkpwr_fingers, rmult=1, multipliers=clkpwr_multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True\nplace a pmos called clkpwrR with width=clkpwr_width, length=clkpwr_length, fingers=clkpwr_fingers, rmult=1, multipliers=clkpwr_multipliers, with_substrate_tap=False, with_tie=True, with_dummy=True\n// more than one component has been placed, so move\nmove clkgnd below inputdiff\nmove bridge above inputdiff\nmove ccinvs above bridge\nmove clkpwrR right of ccinvs\nmove clkpwrR above bridge\nmove clkpwrL left of ccinvs\nmove clkpwrL above bridge\n// strong arm latch, route bridge to inputdiff, inputdiff to clkgnd, ccinvs to clkpwr, bridge to ccins, and clock routing\n# route bridge to inputdiff\nroute between inputdiff_A_drain_E and bridge_drain_E using smart_route\nroute between inputdiff_B_drain_W and bridge_source_W using smart_route\n# route inputdiff with clkgnd\nroute between inputdiff_A_source_E and clkgnd_multiplier_0_drain_E using smart_route\n# route ccinvs to clkpwr\nroute between ccinvs_ccinvs_top_A_drain_W and clkpwrL_drain_W using smart_route\nroute between ccinvs_ccinvs_top_B_source_E and clkpwrR_drain_E using smart_route\n# route bridge to ccinvs\nroute between bridge_source_W and ccinvs_ccinvs_bottom_A_source_W using smart_route\nroute between bridge_drain_E and ccinvs_ccinvs_bottom_B_source_E using smart_route\n# clock routing\nroute between clkgnd_gate_W and clkpwrL_gate_W using smart_route\nroute between clkgnd_gate_E and clkpwrR_gate_E using smart_route",
    "ULPD": "ULPD\n# ultra low power diode\n# figure 43\n// no imports\n// create parameters: forward_width, leakred_width, forward_length, leakred_length, forward_multiplier, leakred_multiplier, forward_fingers, leakred_fingers\ncreate a float parameter called forward_width\ncreate a float parameter called leakred_width\ncreate a float parameter called forward_length\ncreate a float parameter called leakred_length\ncreate a int parameter called forward_multiplier\ncreate a int parameter called leakred_multiplier\ncreate a int parameter called forward_fingers\ncreate a int parameter called leakred_fingers\n// place\nplace a nmos called forward with width=forward_width, length=forward_length, fingers=forward_fingers, rmult=1, multipliers=forward_multiplier, with_substrate_tap=False, with_tie=False, with_dummy=False \nplace a nmos called leakred with width=leakred_width, length=leakred_length, fingers=leakred_fingers, rmult=1, multipliers=leakred_multiplier, with_substrate_tap=False, with_tie=False, with_dummy=False \n// more than one component has been placed, so move\nmove forward above leakred\n// low power diode, route gate to source, and source to gate\nroute between forward_gate_E and leakred_source_E using smart_route\nroute between forward_source_W and leakred_gate_W using smart_route\n",
    "Varactor": "Varactor\n# figure 30 variable capacitor\n// no imports\n// create parameters: control_width, accumulation_width, control_length, accumulation_length, control_multiplier, accumulation_multiplier, control_fingers, accumulation_fingers\ncreate a float parameter called control_width\ncreate a float parameter called accumulation_width\ncreate a float parameter called control_length\ncreate a float parameter called accumulation_length\ncreate a int parameter called control_multiplier\ncreate a int parameter called accumulation_multiplier\ncreate a int parameter called control_fingers\ncreate a int parameter called accumulation_fingers\n// place\nplace a nmos called control with width=control_width, length=control_length, fingers=control_fingers, rmult=1, multipliers=control_multiplier, with_substrate_tap=False, with_tie=False, with_dummy=False\nplace a nmos called accumulation with width=accumulation_width, length=accumulation_length, fingers=accumulation_fingers, rmult=1, multipliers=accumulation_multiplier, with_substrate_tap=False, with_tie=False, with_dummy=False \n// more than one component has been placed, so move\nmove accumulation to the right of control\n// variable capacitor route drain to drain, source to source, and source to drain\nroute between control_drain_N and accumulation_drain_N using smart_route\nroute between control_source_N and accumulation_source_N using smart_route\nroute between control_source_N and accumulation_drain_N using smart_route\n",
    "ViaArray3x2": "ViaArray3x2\n# 3 rows by 2 cols array of vias\n// no imports\n// create parameters: glayer1, glayer2\ncreate a str parameter called glayer1\ncreate a str parameter called glayer2\n// place 3*2=6 array elements\nplace a via called element1 with glayer1=glayer1, glayer2=glayer2\nplace a via called element2 with glayer1=glayer1, glayer2=glayer2\nplace a via called element3 with glayer1=glayer1, glayer2=glayer2\nplace a via called element4 with glayer1=glayer1, glayer2=glayer2\nplace a via called element5 with glayer1=glayer1, glayer2=glayer2\nplace a via called element6 with glayer1=glayer1, glayer2=glayer2\n// move first row into position\nmove element2 to the right of element1\n// move second row above first row\nmove element3 above element1\nmove element4 above element1\nmove element4 to the right of element3\n// move third row above second row\nmove element5 above element3\nmove element6 above element3\nmove element6 to the right of element5\n// route top_met_ of the vias and bottom_met_ of the vias\n# route top met\n# top_met_\n# row1\nroute between element1_top_met_E and element2_top_met_W using smart_route\n# row2\nroute between element3_top_met_E and element4_top_met_W using smart_route\n# row3\nroute between element5_top_met_E and element6_top_met_W using smart_route\n# col1\nroute between element1_top_met_N and element3_top_met_S using smart_route\nroute between element3_top_met_N and element5_top_met_S using smart_route\n# col2\nroute between element2_top_met_N and element4_top_met_S using smart_route\nroute between element4_top_met_N and element6_top_met_S using smart_route\n# bottom_met_\n# row1\nroute between element1_bottom_met_E and element2_bottom_met_W using smart_route\n# row2\nroute between element3_bottom_met_E and element4_bottom_met_W using smart_route\n# row3\nroute between element5_bottom_met_E and element6_bottom_met_W using smart_route\n# col1\nroute between element1_bottom_met_N and element3_bottom_met_S using smart_route\nroute between element3_bottom_met_N and element5_bottom_met_S using smart_route\n# col2\nroute between element2_bottom_met_N and element4_bottom_met_S using smart_route\nroute between element4_bottom_met_N and element6_bottom_met_S using smart_route\n",
    "VoltageFollower": "VoltageFollower\n# figure 33\n# tet stands for Transconductance Enhancement Transistor and gsc stands for Gate-Source Capacitance Transistor\n// no imports\n// create parameters: gsc_width, tet_width, gsc_length, tet_length, gsc_multiplier, tet_multiplier, gsc_fingers, tet_fingers\ncreate a float parameter called gsc_width\ncreate a float parameter called tet_width\ncreate a float parameter called gsc_length\ncreate a float parameter called tet_length\ncreate a int parameter called gsc_multiplier\ncreate a int parameter called tet_multiplier\ncreate a int parameter called gsc_fingers\ncreate a int parameter called tet_fingers\n// place\nplace a nmos called gsc with width=gsc_width, length=gsc_length, fingers=gsc_fingers, rmult=1, multipliers=gsc_multiplier, with_substrate_tap=False, with_tie=False, with_dummy=False\nplace a nmos called tet with width=tet_width, length=tet_length, fingers=tet_fingers, rmult=1, multipliers=tet_multiplier, with_substrate_tap=False, with_tie=False, with_dummy=False\n// more than one component has been placed, so move\nmove gsc above tet\n// voltage follower route source to drain and drain to gate\nroute between tet_source_W and gsc_drain_W using smart_route\nroute between tet_drain_E and gsc_gate_E using smart_route",
    "WilsonCurrentMirror": "WilsonCurrentMirror\n// create parameters: wcm_length, wcm_fingers\nCreate a float parameter called wcm_length\nCreate an int parameter called wcm_fingers\n// place\nplace 4 interdigitated transistors called wcm with numcols=wcm_fingers, length=wcm_length, top_row_device=\"nfet\", bottom_row_device=\"nfet\"\n// only one component placed, so no move\n# route bottom two transistors\nroute between wcm_bottom_A_source_E and wcm_bottom_B_source_E using smart_route\nroute between wcm_bottom_A_gate_E and wcm_bottom_B_gate_E using smart_route\nroute between wcm_bottom_B_gate_E and wcm_bottom_B_drain_E using smart_route\n# route top two transistors\nroute between wcm_top_A_gate_E and wcm_top_B_gate_E using smart_route\nroute between wcm_top_A_gate_E and wcm_top_A_drain_E using smart_route\n# route sources/drains\nroute between wcm_top_A_source_E and wcm_bottom_A_drain_E using smart_route\nroute between wcm_top_B_source_E and wcm_bottom_B_drain_E using smart_route"
}